#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.." # cd to last directory level
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all }
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}


install_dependencies() {
  if [ "$(uname -s)" == "Linux" ]; then
    info "installing dependencies"
    sudo apt install -y git
    sudo apt install -y curl
    sudo apt install -y zsh
    sudo apt install -y trash-cli
  fi
  if [ ! -d $HOME/.fonts ]; then
    # Powerline fonts
    git clone https://github.com/powerline/fonts.git --depth=1 $HOME/.fonts
    sudo $HOME/.fonts/install.sh
  fi
}

# install oh-my-zsh
install_oh_my_zsh() {
  info "installing oh-my-zsh..."
  if [ ! -d $HOME/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    rm $HOME/.oh-my-zsh/themes/agnoster.zsh-theme
    cp $HOME/.dotfiles/zsh/agnoster.zsh-theme $HOME/.oh-my-zsh/themes/agnoster.zsh-theme
  fi
}

# install tmux-package-manager
install_tpm() {
  info "installing tpm..."
  if [ ! -d $HOME/.tmux/plugins/tpm ];then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
}


# create vim backup and swap files
if [ ! -d $HOME/.vim ]; then
  echo 
  echo "================================="
  echo 'Creating vim backup directory...'
  mkdir -p $HOME/.vim/colors
  cp  $HOME/.dotfiles/vim/molokai.vim $HOME/.vim/colors/molokai.vim
  mkdir -p $HOME/.vim/backups
  mkdir -p $HOME/.vim/swaps
  mkdir -p $HOME/.vim/undo
  echo "================================="
fi

# install conda
install_conda() {
  info "installing conda..."
  if [ "$(uname -s)" == "Linux" ]; then
    if [ ! -d $HOME/miniconda ]; then
      curl -fsSL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh > out
      chmod +x out && bash out -b -p $HOME/miniconda
      rm out
    fi
  elif [ "$(uname -s)" == "Darwin" ]; then
    if [ ! -d $HOME/miniconda ]; then
      curl -fsSL https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh > out
      chmod +x out && bash out -b -p $HOME/miniconda
      rm out
    fi
  fi
}

dot () {
  # If we're on a Mac, let's install and setup homebrew.
  if [ "$(uname -s)" == "Darwin" ]
  then
    info "installing dependencies"
    if source bin/dot | while read -r data; do info "$data"; done
    then
      success "dependencies installed"
    else
      fail "error installing dependencies"
    fi
  fi
}

install_dependencies
dot
install_tpm
install_conda
setup_gitconfig
install_dotfiles
install_oh_my_zsh

# 
chmod +x $HOME/.dotfiles/script/*
chmod +x $HOME/.dotfiles/bin/*
chmod +x $HOME/.dotfiles/homebrew/*

echo ''
echo 'All installed!'
