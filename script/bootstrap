#!/usr/bin/env bash
#
# bootstrap installs things.

# cd to last directory level
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# Get the OS info
OS="Darwin"
if [ "$(uname -s)" == "Darwin" ]; then
  OS="Linux"
fi

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]; then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && \
       [ "$skip_all" == "false" ]; then

      action="B"
      case "$action" in
        o )
          overwrite=true;;
        O )
          overwrite_all=true;;
        b )
          backup=true;;
        B )
          backup_all=true;;
        s )
          skip=true;;
        S )
          skip_all=true;;
        * )
          ;;
      esac
    fi

    overwrite=${overwrite:-$overwrite_all }
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

setup_symlink () {
  info 'Link all symlink files...'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}


install_dependencies() {
  if [ "$(uname -s)" == "Linux" ]; then
    info "installing dependencies for Linux os"
    sudo apt-get update
    sudo apt install -y git
    sudo apt install -y curl
    sudo apt install -y zsh
    sudo apt install -y tmux
    sudo apt install -y trash-cli
  else
    # (TODO) add dependencies for Mac
    info "installing dependencies for Mac"
    if source bin/dot | while read -r data; do info "$data"; done; then
      success "dependencies installed"
    else
      fail "error installing dependencies"
    fi
  fi
}

install_fonts() {
  info "installing fonts.."
  if [ ! -d $HOME/.fonts ]; then
    git clone https://github.com/powerline/fonts.git --depth=1 $HOME/.fonts
    sudo $HOME/.fonts/install.sh
  fi
}

install_prezto() {
  info "installing prezto..."
  url="https://github.com/sorin-ionescu/prezto.git"
  if [ ! -d "$HOME/.zprezto" ]; then
    git clone --recursive $url "$HOME/.zprezto"
    sudo chsh -s /bin/zsh
  fi
  ln -fs $DOTFILES_ROOT/zprezto/zshrc.zprezto $HOME/.zshrc
}

install_oh_my_zsh() {
  info "installing oh-my-zsh..."
  url="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
  if [ ! -d $HOME/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL $url)"
    if [ "$OS" == "Linux"]; then
      sudo chsh -s /usr/bin/zsh
    else
      sudo chsh -s /bin/zsh
    fi
    rm .zshrc.pre-oh-my-zsh
  fi
  ln -fs $DOTFILES_ROOT/oh-my-zsh/zshrc.oh-my-zsh $HOME/.zshrc
}

install_tpm() {
  # install tmux-package-manager
  info "installing tmux tpm..."
  if [ ! -d $HOME/.tmux/plugins/tpm ];then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
}

install_vim() {
  # create vim backup and swap files
  if [ ! -d $HOME/.vim ]; then
    echo
    echo "================================="
    echo 'Creating vim backup directory...'
    mkdir -p $HOME/.vim/colors
    cp $HOME/.dotfiles/vim/molokai.vim $HOME/.vim/colors/molokai.vim
    mkdir -p $HOME/.vim/backups
    mkdir -p $HOME/.vim/swaps
    mkdir -p $HOME/.vim/undo
    echo "================================="
  fi
}

# install conda
install_conda() {
  info "installing conda..."
  if [ "$OS" == "Linux" ]; then
    url="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
  elif [ "$OS" == "Darwin" ]; then
    url="https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"
  fi

  if [ ! -d $HOME/miniconda ]; then
    curl -fsSL $url > out
    chmod +x out && bash out -b -p $HOME/miniconda
    rm out
  fi
}

print_usage() {
  cat << EOF >&2
Usage: $0 -d -o -g -f -p -t
  -d install dependencies
  -o install oh-my-zsh
  -g setup gitconfig
  -f install powerline font
  -p install prezto
  -t install tmux package manager
  -i install vim

Default install all stuff.
EOF
}

if [ $# -lt  1 ] ; then
  print_usage
  exit 1
fi

CFG="all"
while getopts "dogfptih" opt; do
  case $opt in
    d ) CFG="dependencies" ;;
    o ) CFG="oh-my-zsh" ;;
    g ) CFG="gitconfig" ;;
    f ) CFG="fonts" ;;
    p ) CFG="prezto" ;;
    t ) CFG="tmux-package-manager";;
    i ) CFG="vim" ;;
    h ) print_usage; exit 1;;
  esac
done


if [ "$CFG" == "dependencies" ] || [ "$CFG" == "all" ]; then
  install_dependencies
fi

if [ "$CFG" == "oh-my-zsh" ] || [ "$CFG" == "all" ]; then
  install_oh_my_zsh
fi

if [ "$CFG" == "gitconfig" ] || [ "$CFG" == "all" ]; then
  setup_gitconfig
fi

if [ "$CFG" == "fonts" ] || [ "$CFG" == "all" ]; then
  install_fonts
fi

if [ "$CFG" == "prezto" ] || [ "$CFG" == "all" ]; then
  install_prezto
fi

if [ "$CFG" == "tmux-package-manager" ] || [ "$CFG" == "all" ]; then
  install_tpm
fi

if [ "$CFG" == "vim" ] || [ "$CFG" == "all" ]; then
  install_vim
fi

# TODO(landcold7): set local mirrors for tools like `apt brew pip` for high speed
# alacritty installation commands.

setup_symlink
chmod +x $HOME/.dotfiles/script/*
chmod +x $HOME/.dotfiles/bin/*
chmod +x $HOME/.dotfiles/homebrew/*

echo ''
info 'All installed!'
